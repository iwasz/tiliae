CMAKE_MINIMUM_REQUIRED (VERSION 2.8 FATAL_ERROR)

if(COMMAND cmake_policy)
    cmake_policy(SET CMP0003 NEW)
endif(COMMAND cmake_policy)

# Here we can set what to build actually (1=build, 0=do not build).
SET (BUILD_CORE                ON CACHE BOOL "")
SET (BUILD_COMMON              ON CACHE BOOL "")
SET (BUILD_REFLECTION          ON CACHE BOOL "")
SET (BUILD_TEST_HELPERS        ON CACHE BOOL "Buduje tylko gdy BUILD_TESTS true")
SET (BUILD_FACTORY             ON CACHE BOOL "")
SET (BUILD_EDITOR              ON CACHE BOOL "")
SET (BUILD_BEAN_WRAPPER        ON CACHE BOOL "")
SET (BUILD_K202                ON CACHE BOOL "")
SET (BUILD_SIGNAL              ON CACHE BOOL "")
SET (BUILD_STATE_MACHINE       OFF CACHE BOOL "")
SET (BUILD_CONTAINER           ON CACHE BOOL "")
SET (BUILD_DEMO                OFF CACHE BOOL "Whether to build demo, or not.")
SET (BUILD_TESTS               OFF CACHE BOOL "Whether to build tests, or not.")
SET (WITH_CORE_STRING          OFF CACHE BOOL "Deprecated.")
SET (WITH_PARSER               ON CACHE BOOL "Reflection with custom clang parser.")
SET (WITH_ANNOTATIONS          OFF CACHE BOOL "Reflection with annotations.")

if (WITH_CORE_STRING)
    add_definitions (-DWITH_CORE_STRING)
endif ()

if ("${CMAKE_BUILD_TYPE}" STREQUAL "Release")
    SET (BUILD_DEMO                0)
    SET (BUILD_TESTS               0)
endif()

if (WITH_CORE_STRING)
    add_definitions (-DWITH_CORE_STRING)
endif ()

#SET (TARGET_PLATFORM "" CACHE STRING "Na jaka platforme budujemy")
#SET_PROPERTY (CACHE TARGET_PLATFORM PROPERTY STRINGS Linux Windows Android iPhone)

SET (CMAKE_C_FLAGS " -DTILIAE_DLL -DALLOW_CAST_TO_SMART ")
SET (CMAKE_CXX_FLAGS "-DTILIAE_DLL -DALLOW_CAST_TO_SMART -std=c++11 -stdlib=libc++")
#ADD_DEFINITIONS (-Wall)

#SET (CMAKE_SHARED_LINKER_FLAGS "-Wl,--no-undefined")
#SET (CMAKE_EXE_LINKER_FLAGS "-Wl,--no-undefined")
SET (CMAKE_VERBOSE_MAKEFILE OFF)

INSTALL (
    DIRECTORY "${PROJECT_SOURCE_DIR}/src/"
    DESTINATION "include/tiliae"
    FILES_MATCHING PATTERN "*.h"
    PATTERN "*.svn*" EXCLUDE
    PATTERN "*.git*" EXCLUDE
    PATTERN "*test*" EXCLUDE)

INSTALL (
    DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/pc/"
    DESTINATION "lib/pkgconfig"
    FILES_MATCHING PATTERN "*.pc"
    PATTERN "*.svn*" EXCLUDE
    PATTERN "*.git*" EXCLUDE)

find_package (Boost REQUIRED COMPONENTS system prg_exec_monitor unit_test_framework)
include_directories(${Boost_INCLUDE_DIRS})
link_directories (${Boost_LIBRARY_DIRS})

include (FindPkgConfig)
pkg_check_modules (MXML REQUIRED "mxml")
INCLUDE_DIRECTORIES (${MXML_INCLUDE_DIRS})
link_directories(${MXML_LIBRARY_DIRS})

IF (WITH_ANNOTATIONS)
        MESSAGE (STATUS "Building reflection with annotations.")
        ADD_DEFINITIONS (-DWITH_ANNOTATIONS)
ENDIF ()

IF (WITH_PARSER)
        MESSAGE (STATUS "Building reflection with parser.")
        ADD_DEFINITIONS (-DWITH_PARSER)
ENDIF ()

INCLUDE_DIRECTORIES (./)

## --------------------------------------------------------
## Core
## --------------------------------------------------------
IF(BUILD_CORE)
        ADD_DEFINITIONS (-DBUILD_CORE)
        LIST (APPEND LIB_SOURCES "core/allocator/Allocator.h")
        LIST (APPEND LIB_SOURCES "core/allocator/ArrayRegionAllocator.h")
        LIST (APPEND LIB_SOURCES "core/allocator/IAllocator.h")
        LIST (APPEND LIB_SOURCES "core/ApiMacro.h")
        LIST (APPEND LIB_SOURCES "core/Core.h")
        LIST (APPEND LIB_SOURCES "core/DebugContext.cc")
        LIST (APPEND LIB_SOURCES "core/DebugContext.h")
        LIST (APPEND LIB_SOURCES "core/Exception.cc")
        LIST (APPEND LIB_SOURCES "core/Exception.h")
        LIST (APPEND LIB_SOURCES "core/Iterator.h")
        LIST (APPEND LIB_SOURCES "core/IToStringEnabled.cc")
        LIST (APPEND LIB_SOURCES "core/IToStringEnabled.h")
        LIST (APPEND LIB_SOURCES "core/Object.h")
        LIST (APPEND LIB_SOURCES "core/Pointer.h")

        IF (WITH_CORE_STRING)
                LIST (APPEND LIB_SOURCES "core/string/String.cc")
                LIST (APPEND LIB_SOURCES "core/string/String.h")
                LIST (APPEND LIB_SOURCES "core/string/utf8/checked.h")
                LIST (APPEND LIB_SOURCES "core/string/utf8/core.h")
                LIST (APPEND LIB_SOURCES "core/string/utf8.h")
                LIST (APPEND LIB_SOURCES "core/string/utf8/unchecked.h")
        ENDIF ()

        LIST (APPEND LIB_SOURCES "core/StrUtil.cc")
        LIST (APPEND LIB_SOURCES "core/StrUtil.h")
        LIST (APPEND LIB_SOURCES "core/Typedefs.h")
        LIST (APPEND LIB_SOURCES "core/variant/Cast.cc")
        LIST (APPEND LIB_SOURCES "core/variant/Cast.h")
        LIST (APPEND LIB_SOURCES "core/variant/Variant.cc")
        LIST (APPEND LIB_SOURCES "core/variant/Variant.h")
ENDIF(BUILD_CORE)
## --------------------------------------------------------
## Common
## --------------------------------------------------------
IF(BUILD_COMMON)
        ADD_DEFINITIONS (-DBUILD_COMMON)

        LIST (APPEND LIB_SOURCES "common/collection/Collection.h")
        LIST (APPEND LIB_SOURCES "common/collection/OrderedVariantMap.cc")
        LIST (APPEND LIB_SOURCES "common/collection/OrderedVariantMap.h")
        LIST (APPEND LIB_SOURCES "common/Common.h")
        LIST (APPEND LIB_SOURCES "common/dataSource/DataSourceAndroid.cc")
        LIST (APPEND LIB_SOURCES "common/dataSource/DataSource.h")
        LIST (APPEND LIB_SOURCES "common/dataSource/DataSourcePC.cc")

        IF (0)
                LIST (APPEND LIB_SOURCES "common/handler/DebugHandler.cc")
                LIST (APPEND LIB_SOURCES "common/handler/DebugHandler.h")
                LIST (APPEND LIB_SOURCES "common/handler/IHandler.h")
                LIST (APPEND LIB_SOURCES "common/handler/SingleHandler.cc")
                LIST (APPEND LIB_SOURCES "common/handler/SingleHandler.h")
                LIST (APPEND LIB_SOURCES "common/handler/ZeroHandler.cc")
                LIST (APPEND LIB_SOURCES "common/handler/ZeroHandler.h")
        ENDIF ()

        LIST (APPEND LIB_SOURCES "common/logger/ConsoleLogger.cc")
        LIST (APPEND LIB_SOURCES "common/logger/ConsoleLogger.h")
        LIST (APPEND LIB_SOURCES "common/logger/ILogger.h")
        LIST (APPEND LIB_SOURCES "common/logger/NullLogger.h")
        LIST (APPEND LIB_SOURCES "common/path/IPath.h")
        LIST (APPEND LIB_SOURCES "common/path/ListPath.cc")
        LIST (APPEND LIB_SOURCES "common/path/ListPath.h")
        LIST (APPEND LIB_SOURCES "common/path/Path.cc")
        LIST (APPEND LIB_SOURCES "common/path/Path.h")
        LIST (APPEND LIB_SOURCES "common/StringUtils.cc")
        LIST (APPEND LIB_SOURCES "common/StringUtils.h")
ENDIF(BUILD_COMMON)
## --------------------------------------------------------
## Reflection
## --------------------------------------------------------
IF(BUILD_REFLECTION)
        ADD_DEFINITIONS (-DBUILD_REFLECTION)

        LIST (APPEND LIB_SOURCES "reflection/annotations/AnnotationManager.cc")
        LIST (APPEND LIB_SOURCES "reflection/annotations/AnnotationManager.h")
        LIST (APPEND LIB_SOURCES "reflection/annotations/Annotations.h")
        LIST (APPEND LIB_SOURCES "reflection/annotations/IAnnotation.h")
        LIST (APPEND LIB_SOURCES "reflection/annotations/Macros.h")
        LIST (APPEND LIB_SOURCES "reflection/annotations/PreprocessorDec.h")
        LIST (APPEND LIB_SOURCES "reflection/ClassContainer.cc")
        LIST (APPEND LIB_SOURCES "reflection/ClassContainer.h")
        LIST (APPEND LIB_SOURCES "reflection/Exceptions.h")
        LIST (APPEND LIB_SOURCES "reflection/IClassContainer.h")
        LIST (APPEND LIB_SOURCES "reflection/ListHelper.cc")
        LIST (APPEND LIB_SOURCES "reflection/ListHelper.h")
        LIST (APPEND LIB_SOURCES "reflection/Manager.cc")
        LIST (APPEND LIB_SOURCES "reflection/Manager.h")
        LIST (APPEND LIB_SOURCES "reflection/model/Class.cc")
        LIST (APPEND LIB_SOURCES "reflection/model/Class.h")
        LIST (APPEND LIB_SOURCES "reflection/model/Constructor.cc")
        LIST (APPEND LIB_SOURCES "reflection/model/Constructor.h")
        LIST (APPEND LIB_SOURCES "reflection/model/Field.h")
        LIST (APPEND LIB_SOURCES "reflection/model/Method.cc")
        LIST (APPEND LIB_SOURCES "reflection/model/Method.h")
        LIST (APPEND LIB_SOURCES "reflection/model/Model.h")
        LIST (APPEND LIB_SOURCES "reflection/reflectAnnotations/BaseClassAnnotation.cc")
        LIST (APPEND LIB_SOURCES "reflection/reflectAnnotations/BaseClassAnnotation.h")
        LIST (APPEND LIB_SOURCES "reflection/reflectAnnotations/ClassAnnotation.cc")
        LIST (APPEND LIB_SOURCES "reflection/reflectAnnotations/ClassAnnotation.h")
        LIST (APPEND LIB_SOURCES "reflection/reflectAnnotations/CollectionAnnotation.h")
        LIST (APPEND LIB_SOURCES "reflection/reflectAnnotations/ConstructorAnnotation.cc")
        LIST (APPEND LIB_SOURCES "reflection/reflectAnnotations/ConstructorAnnotation.h")
        LIST (APPEND LIB_SOURCES "reflection/reflectAnnotations/FactoryMethodAnnotation.h")
        LIST (APPEND LIB_SOURCES "reflection/reflectAnnotations/FieldAnnotation.h")
        LIST (APPEND LIB_SOURCES "reflection/reflectAnnotations/IReflectionAnnotation.h")
        LIST (APPEND LIB_SOURCES "reflection/reflectAnnotations/MethodAnnotation.cc")
        LIST (APPEND LIB_SOURCES "reflection/reflectAnnotations/MethodAnnotation.h")
        LIST (APPEND LIB_SOURCES "reflection/reflectAnnotations/ReflectAnnotations.h")
        LIST (APPEND LIB_SOURCES "reflection/Reflection.cc")
        LIST (APPEND LIB_SOURCES "reflection/Reflection.h")
        LIST (APPEND LIB_SOURCES "reflection/ReflectionTools.cc")
        LIST (APPEND LIB_SOURCES "reflection/ReflectionTools.h")
        LIST (APPEND LIB_SOURCES "reflection/Tools.h")
        LIST (APPEND LIB_SOURCES "reflection/visitor/ClassInternalsVisitor.cc")
        LIST (APPEND LIB_SOURCES "reflection/visitor/ClassInternalsVisitor.h")
        LIST (APPEND LIB_SOURCES "reflection/visitor/ClassVisitor.cc")
        LIST (APPEND LIB_SOURCES "reflection/visitor/ClassVisitor.h")
        LIST (APPEND LIB_SOURCES "reflection/visitor/IReflectionVisitor.h")
        LIST (APPEND LIB_SOURCES "reflection/wrapper/AddWrapper.h")
        LIST (APPEND LIB_SOURCES "reflection/wrapper/ConstructorPointer.h")
        LIST (APPEND LIB_SOURCES "reflection/wrapper/Deleter.h")
        LIST (APPEND LIB_SOURCES "reflection/wrapper/FieldWrapper.h")
        LIST (APPEND LIB_SOURCES "reflection/wrapper/GetWrapper.h")
        LIST (APPEND LIB_SOURCES "reflection/wrapper/ICallableWrapper.h")
        LIST (APPEND LIB_SOURCES "reflection/wrapper/IteratorWrapper.h")
        LIST (APPEND LIB_SOURCES "reflection/wrapper/MethodWrapper.h")
        LIST (APPEND LIB_SOURCES "reflection/wrapper/SetterWrapper.h")
        LIST (APPEND LIB_SOURCES "reflection/wrapper/SetWrapper.h")
        LIST (APPEND LIB_SOURCES "reflection/wrapper/WrapperCommons.cc")
        LIST (APPEND LIB_SOURCES "reflection/wrapper/WrapperCommons.h")
        LIST (APPEND LIB_SOURCES "reflection/wrapper/Wrapper.h")
ENDIF(BUILD_REFLECTION)
## --------------------------------------------------------
## BeanWrapper
## --------------------------------------------------------
IF(BUILD_BEAN_WRAPPER)
        ADD_DEFINITIONS (-DBUILD_BEAN_WRAPPER)

        LIST (APPEND LIB_SOURCES "beanWrapper/beanWrapper/BeanWrapper.cc")
        LIST (APPEND LIB_SOURCES "beanWrapper/beanWrapper/BeanWrapper.h")
        LIST (APPEND LIB_SOURCES "beanWrapper/BeanWrapper.h")
        LIST (APPEND LIB_SOURCES "beanWrapper/IBeanWrapper.h")
        LIST (APPEND LIB_SOURCES "beanWrapper/IPropertyAccessor.h")
        LIST (APPEND LIB_SOURCES "beanWrapper/misc/IndexedEditor.cc")
        LIST (APPEND LIB_SOURCES "beanWrapper/misc/IndexedEditor.h")
        LIST (APPEND LIB_SOURCES "beanWrapper/misc/SimpleMapEditor.cc")
        LIST (APPEND LIB_SOURCES "beanWrapper/misc/SimpleMapEditor.h")
        LIST (APPEND LIB_SOURCES "beanWrapper/plugins/GetPutMethodRWBeanWrapperPlugin.cc")
        LIST (APPEND LIB_SOURCES "beanWrapper/plugins/GetPutMethodRWBeanWrapperPlugin.h")
        LIST (APPEND LIB_SOURCES "beanWrapper/plugins/IBeanWrapperPlugin.h")
        LIST (APPEND LIB_SOURCES "beanWrapper/plugins/ListPlugin.cc")
        LIST (APPEND LIB_SOURCES "beanWrapper/plugins/ListPlugin.h")
        LIST (APPEND LIB_SOURCES "beanWrapper/plugins/MapPlugin.cc")
        LIST (APPEND LIB_SOURCES "beanWrapper/plugins/MapPlugin.h")
        LIST (APPEND LIB_SOURCES "beanWrapper/plugins/MethodPlugin.cc")
        LIST (APPEND LIB_SOURCES "beanWrapper/plugins/MethodPlugin.h")
        LIST (APPEND LIB_SOURCES "beanWrapper/plugins/Plugins.h")
        LIST (APPEND LIB_SOURCES "beanWrapper/plugins/PropertyRWBeanWrapperPlugin.cc")
        LIST (APPEND LIB_SOURCES "beanWrapper/plugins/PropertyRWBeanWrapperPlugin.h")
ENDIF(BUILD_BEAN_WRAPPER)
## --------------------------------------------------------
## Factory
## --------------------------------------------------------
IF(BUILD_FACTORY)
        ADD_DEFINITIONS (-DBUILD_FACTORY)

        LIST (APPEND LIB_SOURCES "factory/ChainFactory.cc")
        LIST (APPEND LIB_SOURCES "factory/ChainFactory.h")
        LIST (APPEND LIB_SOURCES "factory/Factory.h")
        LIST (APPEND LIB_SOURCES "factory/IFactory.h")
        LIST (APPEND LIB_SOURCES "factory/LazyFactory.h")
        LIST (APPEND LIB_SOURCES "factory/ProxyFactory.h")
        LIST (APPEND LIB_SOURCES "factory/ReflectionFactory.cc")
        LIST (APPEND LIB_SOURCES "factory/ReflectionFactory.h")
        LIST (APPEND LIB_SOURCES "factory/ScalarFactory.cc")
        LIST (APPEND LIB_SOURCES "factory/ScalarFactory.h")
        LIST (APPEND LIB_SOURCES "factory/SingletonFactory.h")

ENDIF(BUILD_FACTORY)
## --------------------------------------------------------
## Editor
## --------------------------------------------------------
IF(BUILD_EDITOR)
        ADD_DEFINITIONS (-DBUILD_EDITOR)

        LIST (APPEND LIB_SOURCES "editor/ChainEditor.cc")
        LIST (APPEND LIB_SOURCES "editor/ChainEditor.h")
        LIST (APPEND LIB_SOURCES "editor/Editor.h")
        LIST (APPEND LIB_SOURCES "editor/FactoryEditor.cc")
        LIST (APPEND LIB_SOURCES "editor/FactoryEditor.h")
        LIST (APPEND LIB_SOURCES "editor/IEditor.h")
        LIST (APPEND LIB_SOURCES "editor/JEditor.h")
        LIST (APPEND LIB_SOURCES "editor/LazyEditor.h")
        LIST (APPEND LIB_SOURCES "editor/LexicalEditor.cc")
        LIST (APPEND LIB_SOURCES "editor/LexicalEditor.h")
        LIST (APPEND LIB_SOURCES "editor/ListToStringEditor.cc")
        LIST (APPEND LIB_SOURCES "editor/ListToStringEditor.h")
        LIST (APPEND LIB_SOURCES "editor/NoopEditor.h")
        LIST (APPEND LIB_SOURCES "editor/StreamEditor.h")
        LIST (APPEND LIB_SOURCES "editor/StringConstructorEditor.cc")
        LIST (APPEND LIB_SOURCES "editor/StringConstructorEditor.h")
        LIST (APPEND LIB_SOURCES "editor/StringFactoryMethodEditor.cc")
        LIST (APPEND LIB_SOURCES "editor/StringFactoryMethodEditor.h")
        LIST (APPEND LIB_SOURCES "editor/TypeEditor.cc")
        LIST (APPEND LIB_SOURCES "editor/TypeEditor.h")
ENDIF(BUILD_EDITOR)
## --------------------------------------------------------
## K202 expression script
## --------------------------------------------------------
IF(BUILD_K202)
        ADD_DEFINITIONS (-DBUILD_K202)

        LIST (APPEND LIB_SOURCES "k202/ByteCode.cc")
        LIST (APPEND LIB_SOURCES "k202/ByteCode.h")
        LIST (APPEND LIB_SOURCES "k202/compiler/Compiler.cc")
        LIST (APPEND LIB_SOURCES "k202/compiler/Compiler.h")
        LIST (APPEND LIB_SOURCES "k202/Context.cc")
        LIST (APPEND LIB_SOURCES "k202/Context.h")
        LIST (APPEND LIB_SOURCES "k202/Exceptions.h")
        LIST (APPEND LIB_SOURCES "k202/expression/Assignment.cc")
        LIST (APPEND LIB_SOURCES "k202/expression/Assignment.h")
        LIST (APPEND LIB_SOURCES "k202/expression/ContextDependentSimple.cc")
        LIST (APPEND LIB_SOURCES "k202/expression/ContextDependentSimple.h")
        LIST (APPEND LIB_SOURCES "k202/expression/ExpressionCollection.h")
        LIST (APPEND LIB_SOURCES "k202/expression/Expression.h")
        LIST (APPEND LIB_SOURCES "k202/expression/IExpression.h")
        LIST (APPEND LIB_SOURCES "k202/expression/Literal.h")
        LIST (APPEND LIB_SOURCES "k202/expression/LogicExpression.cc")
        LIST (APPEND LIB_SOURCES "k202/expression/LogicExpression.h")
        LIST (APPEND LIB_SOURCES "k202/expression/NArryExpression.cc")
        LIST (APPEND LIB_SOURCES "k202/expression/NArryExpression.h")
        LIST (APPEND LIB_SOURCES "k202/expression/Type.cc")
        LIST (APPEND LIB_SOURCES "k202/expression/Type.h")
        LIST (APPEND LIB_SOURCES "k202/extension/CacheExpression.cc")
        LIST (APPEND LIB_SOURCES "k202/extension/CacheExpression.h")
        LIST (APPEND LIB_SOURCES "k202/extension/CacheExtension.cc")
        LIST (APPEND LIB_SOURCES "k202/extension/CacheExtension.h")
        LIST (APPEND LIB_SOURCES "k202/extension/IExtension.h")
        LIST (APPEND LIB_SOURCES "k202/K202.cc")
        LIST (APPEND LIB_SOURCES "k202/K202.h")
        LIST (APPEND LIB_SOURCES "k202/misc/K202Factory.cc")
        LIST (APPEND LIB_SOURCES "k202/misc/K202Factory.h")
        LIST (APPEND LIB_SOURCES "k202/misc/K202Proxy.cc")
        LIST (APPEND LIB_SOURCES "k202/misc/K202Proxy.h")
        LIST (APPEND LIB_SOURCES "k202/misc/Misc.h")
        LIST (APPEND LIB_SOURCES "k202/Script.cc")
        LIST (APPEND LIB_SOURCES "k202/Script.h")
ENDIF(BUILD_K202)
## --------------------------------------------------------
## Signal
## --------------------------------------------------------
IF(BUILD_SIGNAL)
        ADD_DEFINITIONS (-DBUILD_SIGNAL)

        LIST (APPEND LIB_SOURCES "signal/Functions.cc")
        LIST (APPEND LIB_SOURCES "signal/Functions.h")
        LIST (APPEND LIB_SOURCES "signal/Helper.cc")
        LIST (APPEND LIB_SOURCES "signal/Helper.h")
        LIST (APPEND LIB_SOURCES "signal/Listener.cc")
        LIST (APPEND LIB_SOURCES "signal/Listener.h")
        LIST (APPEND LIB_SOURCES "signal/Manager.cc")
        LIST (APPEND LIB_SOURCES "signal/Manager.h")
        LIST (APPEND LIB_SOURCES "signal/Scope.cc")
        LIST (APPEND LIB_SOURCES "signal/Scope.h")
        LIST (APPEND LIB_SOURCES "signal/Sender.cc")
        LIST (APPEND LIB_SOURCES "signal/Sender.h")
        LIST (APPEND LIB_SOURCES "signal/Signal.h")
ENDIF(BUILD_SIGNAL)
## --------------------------------------------------------
## StateMachine
## --------------------------------------------------------
IF(BUILD_STATE_MACHINE)
        ADD_DEFINITIONS (-DBUILD_STATE_MACHINE)

        LIST (APPEND LIB_SOURCES "stateMachine/action/Action.h")
        LIST (APPEND LIB_SOURCES "stateMachine/action/IAction.h")
        LIST (APPEND LIB_SOURCES "stateMachine/action/K202Action.cc")
        LIST (APPEND LIB_SOURCES "stateMachine/action/K202Action.h")
        LIST (APPEND LIB_SOURCES "stateMachine/Always.cc")
        LIST (APPEND LIB_SOURCES "stateMachine/Always.h")
        LIST (APPEND LIB_SOURCES "stateMachine/ChainMachine.cc")
        LIST (APPEND LIB_SOURCES "stateMachine/ChainMachine.h")
        LIST (APPEND LIB_SOURCES "stateMachine/condition/Condition.h")
        LIST (APPEND LIB_SOURCES "stateMachine/condition/ICondition.h")
        LIST (APPEND LIB_SOURCES "stateMachine/condition/K202Condition.cc")
        LIST (APPEND LIB_SOURCES "stateMachine/condition/K202Condition.h")
        LIST (APPEND LIB_SOURCES "stateMachine/condition/SimpleCondition.cc")
        LIST (APPEND LIB_SOURCES "stateMachine/condition/SimpleCondition.h")
        LIST (APPEND LIB_SOURCES "stateMachine/context/Context.h")
        LIST (APPEND LIB_SOURCES "stateMachine/context/MachineContext.cc")
        LIST (APPEND LIB_SOURCES "stateMachine/context/MachineContext.h")
        LIST (APPEND LIB_SOURCES "stateMachine/Exceptions.h")
        LIST (APPEND LIB_SOURCES "stateMachine/extension/Extension.h")
        LIST (APPEND LIB_SOURCES "stateMachine/extension/IMachineExtension.h")
        LIST (APPEND LIB_SOURCES "stateMachine/extension/StackStateExtension.cc")
        LIST (APPEND LIB_SOURCES "stateMachine/extension/StackStateExtension.h")
        LIST (APPEND LIB_SOURCES "stateMachine/IMachinery.h")
        LIST (APPEND LIB_SOURCES "stateMachine/InputActions.cc")
        LIST (APPEND LIB_SOURCES "stateMachine/InputActions.h")
        LIST (APPEND LIB_SOURCES "stateMachine/input/BooleanObject.cc")
        LIST (APPEND LIB_SOURCES "stateMachine/input/BooleanObject.h")
        LIST (APPEND LIB_SOURCES "stateMachine/input/Input.cc")
        LIST (APPEND LIB_SOURCES "stateMachine/input/Input.h")
        LIST (APPEND LIB_SOURCES "stateMachine/input/IntObject.cc")
        LIST (APPEND LIB_SOURCES "stateMachine/input/IntObject.h")
        LIST (APPEND LIB_SOURCES "stateMachine/input/IObject.h")
        LIST (APPEND LIB_SOURCES "stateMachine/input/MultiObject.h")
        LIST (APPEND LIB_SOURCES "stateMachine/input/StrObject.cc")
        LIST (APPEND LIB_SOURCES "stateMachine/input/StrObject.h")
        LIST (APPEND LIB_SOURCES "stateMachine/IState.h")
        LIST (APPEND LIB_SOURCES "stateMachine/Machine.cc")
        LIST (APPEND LIB_SOURCES "stateMachine/Machine.h")
        LIST (APPEND LIB_SOURCES "stateMachine/MachineListener.cc")
        LIST (APPEND LIB_SOURCES "stateMachine/MachineListener.h")
        LIST (APPEND LIB_SOURCES "stateMachine/output/BeanWrapperOutput.cc")
        LIST (APPEND LIB_SOURCES "stateMachine/output/BeanWrapperOutput.h")
        LIST (APPEND LIB_SOURCES "stateMachine/output/IOutput.h")
        LIST (APPEND LIB_SOURCES "stateMachine/output/Output.cc")
        LIST (APPEND LIB_SOURCES "stateMachine/output/Output.h")
        LIST (APPEND LIB_SOURCES "stateMachine/State.cc")
        LIST (APPEND LIB_SOURCES "stateMachine/State.h")
        LIST (APPEND LIB_SOURCES "stateMachine/StateMachine.h")
        LIST (APPEND LIB_SOURCES "stateMachine/SubMachineState.cc")
        LIST (APPEND LIB_SOURCES "stateMachine/SubMachineState.h")
        LIST (APPEND LIB_SOURCES "stateMachine/transition/TransitionActionContainer.cc")
        LIST (APPEND LIB_SOURCES "stateMachine/transition/TransitionActionContainer.h")
        LIST (APPEND LIB_SOURCES "stateMachine/transition/TransitionAction.h")
        LIST (APPEND LIB_SOURCES "stateMachine/transition/Transition.cc")
        LIST (APPEND LIB_SOURCES "stateMachine/transition/Transition.h")
ENDIF(BUILD_STATE_MACHINE)
## --------------------------------------------------------
## container
## --------------------------------------------------------
IF(BUILD_CONTAINER)
        ADD_DEFINITIONS (-DBUILD_CONTAINER)

        LIST (APPEND LIB_SOURCES "container/beanFactory/BeanFactory.cc")
        LIST (APPEND LIB_SOURCES "container/beanFactory/BeanFactoryContainer.cc")
        LIST (APPEND LIB_SOURCES "container/beanFactory/BeanFactoryContainer.h")
        LIST (APPEND LIB_SOURCES "container/beanFactory/BeanFactoryContext.h")
        LIST (APPEND LIB_SOURCES "container/beanFactory/BeanFactory.h")
        LIST (APPEND LIB_SOURCES "container/beanFactory/InternalSingletons.cc")
        LIST (APPEND LIB_SOURCES "container/beanFactory/InternalSingletons.h")
        LIST (APPEND LIB_SOURCES "container/beanFactory/service/BeanFactoryInitService.cc")
        LIST (APPEND LIB_SOURCES "container/beanFactory/service/BeanFactoryInitService.h")
        LIST (APPEND LIB_SOURCES "container/beanFactory/service/BeanFactoryService.cc")
        LIST (APPEND LIB_SOURCES "container/beanFactory/service/BeanFactoryService.h")
        LIST (APPEND LIB_SOURCES "container/beanFactory/service/BeanFactoryVisitorContext.h")
        LIST (APPEND LIB_SOURCES "container/beanFactory/service/BFIndexedEditor.cc")
        LIST (APPEND LIB_SOURCES "container/beanFactory/service/BFIndexedEditor.h")
        LIST (APPEND LIB_SOURCES "container/beanFactory/service/BFMapEditor.cc")
        LIST (APPEND LIB_SOURCES "container/beanFactory/service/BFMapEditor.h")
        LIST (APPEND LIB_SOURCES "container/beanFactory/service/BFStringConstructorEditor.cc")
        LIST (APPEND LIB_SOURCES "container/beanFactory/service/BFStringConstructorEditor.h")
        LIST (APPEND LIB_SOURCES "container/beanFactory/service/EditorService.cc")
        LIST (APPEND LIB_SOURCES "container/beanFactory/service/EditorService.h")
        LIST (APPEND LIB_SOURCES "container/beanFactory/service/FactoryService.cc")
        LIST (APPEND LIB_SOURCES "container/beanFactory/service/FactoryService.h")
        LIST (APPEND LIB_SOURCES "container/beanFactory/service/IndexedValueService.cc")
        LIST (APPEND LIB_SOURCES "container/beanFactory/service/IndexedValueService.h")
        LIST (APPEND LIB_SOURCES "container/beanFactory/service/MappedValueService.cc")
        LIST (APPEND LIB_SOURCES "container/beanFactory/service/MappedValueService.h")
        LIST (APPEND LIB_SOURCES "container/beanFactory/service/SingletonInstantiateService.cc")
        LIST (APPEND LIB_SOURCES "container/beanFactory/service/SingletonInstantiateService.h")
        LIST (APPEND LIB_SOURCES "container/beanFactory/service/ValueServiceHelper.cc")
        LIST (APPEND LIB_SOURCES "container/beanFactory/service/ValueServiceHelper.h")
        LIST (APPEND LIB_SOURCES "container/common/Attributes.cc")
        LIST (APPEND LIB_SOURCES "container/common/Attributes.h")
        LIST (APPEND LIB_SOURCES "container/common/Common.h")
        LIST (APPEND LIB_SOURCES "container/common/Exceptions.h")
        LIST (APPEND LIB_SOURCES "container/common/id/Id.h")
        LIST (APPEND LIB_SOURCES "container/common/id/IIdGenerator.h")
        LIST (APPEND LIB_SOURCES "container/common/id/SimpleIdGenerator.cc")
        LIST (APPEND LIB_SOURCES "container/common/id/SimpleIdGenerator.h")
        LIST (APPEND LIB_SOURCES "container/common/SparseVariantMap.h")
        LIST (APPEND LIB_SOURCES "container/ContainerFactory.cc")
        LIST (APPEND LIB_SOURCES "container/ContainerFactory.h")
        LIST (APPEND LIB_SOURCES "container/Container.h")
        LIST (APPEND LIB_SOURCES "container/Defs.cc")
        LIST (APPEND LIB_SOURCES "container/Defs.h")
        LIST (APPEND LIB_SOURCES "container/inputFormat/compact/CompactMetaService.cc")
        LIST (APPEND LIB_SOURCES "container/inputFormat/compact/CompactMetaService.h")
        LIST (APPEND LIB_SOURCES "container/inputFormat/InputFormat.h")
        LIST (APPEND LIB_SOURCES "container/inputFormat/mxml/MXmlMetaService.cc")
        LIST (APPEND LIB_SOURCES "container/inputFormat/mxml/MXmlMetaService.h")
        LIST (APPEND LIB_SOURCES "container/metaStructure/interface/IDataVisitor.h")
        LIST (APPEND LIB_SOURCES "container/metaStructure/interface/IMetaService.h")
        LIST (APPEND LIB_SOURCES "container/metaStructure/interface/Interface.h")
        LIST (APPEND LIB_SOURCES "container/metaStructure/MetaStructure.h")
        LIST (APPEND LIB_SOURCES "container/metaStructure/model/data/Data.h")
        LIST (APPEND LIB_SOURCES "container/metaStructure/model/data/IData.h")
        LIST (APPEND LIB_SOURCES "container/metaStructure/model/data/NullData.h")
        LIST (APPEND LIB_SOURCES "container/metaStructure/model/data/RefData.h")
        LIST (APPEND LIB_SOURCES "container/metaStructure/model/data/ValueData.h")
        LIST (APPEND LIB_SOURCES "container/metaStructure/model/MetaContainer.cc")
        LIST (APPEND LIB_SOURCES "container/metaStructure/model/MetaContainer.h")
        LIST (APPEND LIB_SOURCES "container/metaStructure/model/MetaFactory.cc")
        LIST (APPEND LIB_SOURCES "container/metaStructure/model/MetaFactory.h")
        LIST (APPEND LIB_SOURCES "container/metaStructure/model/MetaObject.cc")
        LIST (APPEND LIB_SOURCES "container/metaStructure/model/MetaObject.h")
        LIST (APPEND LIB_SOURCES "container/metaStructure/model/MetaStructure.h")
        LIST (APPEND LIB_SOURCES "container/metaStructure/model/Model.h")
        LIST (APPEND LIB_SOURCES "container/metaStructure/service/AbstractMetaService.h")
        LIST (APPEND LIB_SOURCES "container/metaStructure/service/DummyService.h")
        LIST (APPEND LIB_SOURCES "container/metaStructure/service/MetaVisitor.cc")
        LIST (APPEND LIB_SOURCES "container/metaStructure/service/MetaVisitor.h")
        LIST (APPEND LIB_SOURCES "container/metaStructure/service/PrintService.cc")
        LIST (APPEND LIB_SOURCES "container/metaStructure/service/PrintService.h")
        LIST (APPEND LIB_SOURCES "container/metaStructure/service/Service.h")
        LIST (APPEND LIB_SOURCES "container/metaStructure/service/VisitorContext.h")
ENDIF(BUILD_CONTAINER)

LIST (APPEND LIB_SOURCES "Tiliae.h")
LIST (APPEND LIB_SOURCES "ReflectionParserAnnotation.h")

## --------------------------------------------------------
## Biblioteka Tiliae - all in one.
## --------------------------------------------------------

IF (WITH_PARSER)
        TILIAE_PARSE ("${CMAKE_BINARY_DIR}/parser/tiliaeparser" "tiliae" "Reflection_input.cc" "Reflection_output_tiliae.cc.h")
        LIST (APPEND LIB_SOURCES "Reflection_input.cc")
        LIST (APPEND LIB_SOURCES "Reflection_output_tiliae.cc.h")
ENDIF ()

SET (CMAKE_EXPORT_COMPILE_COMMANDS ON)
if (ANDROID)
    add_library (tiliae STATIC ${LIB_SOURCES})
else ()
    add_library (tiliae SHARED ${LIB_SOURCES})
    TARGET_LINK_LIBRARIES (tiliae ${MXML_LIBRARIES})
    TARGET_LINK_LIBRARIES (tiliae c++abi)
    add_dependencies (tiliae tiliaeparser)
endif ()


#IF (WITH_PARSER)
#        TILIAE_PARSE (tiliae "${CMAKE_BINARY_DIR}/parser/tiliaeparser")
#ENDIF()

INSTALL (
    TARGETS tiliae
    DESTINATION lib
    PERMISSIONS
    OWNER_READ OWNER_WRITE OWNER_EXECUTE
    GROUP_READ GROUP_EXECUTE
    WORLD_READ WORLD_EXECUTE)

configure_file (${CMAKE_CURRENT_SOURCE_DIR}/../pc/tiliae.pc.in ${CMAKE_CURRENT_BINARY_DIR}/pc/tiliae.pc @ONLY)
