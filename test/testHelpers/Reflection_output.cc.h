/*
 * This file was aut-generated by tiliaeparser. Do not modify. Unless.
 * Include only once.
 * https://github.com/iwasz/tiliae
 */

#include <reflection/Reflection.h>
#include "Reflection_input.cc"

namespace {
using namespace Core;
using namespace Reflection;

void createReflectionDatabase_testHelpers ()
{
	{
		Class *clazz = new Class ("Object", typeid (Core::Object &), new Reflection::PtrDeleter <Core::Object>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Core::Object, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Core::Object, void>::Level1Wrapper::newConstructorPointer ()));
		}
	}
	{
		Class *clazz = new Class ("Place", typeid (Place &), new Reflection::PtrDeleter <Place>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Place, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Place, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("init", createMethodWrapper (&Place::init)));
			clazz->addMethod (new Method ("init2", createMethodWrapper (&Place::init2)));
			clazz->addMethod (new Method ("getPlace", createMethodWrapper (&Place::getPlace)));
			clazz->addMethod (new Method ("setPlace", createMethodWrapper (&Place::setPlace)));
		}
	}
	{
		Class *clazz = new Class ("Address", typeid (Address &), new Reflection::PtrDeleter <Address>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Place");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Address, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("getStreet", createMethodWrapper (&Address::getStreet)));
			clazz->addMethod (new Method ("setStreet", createMethodWrapper (&Address::setStreet)));
			clazz->addMethod (new Method ("getPostalCode", createMethodWrapper (&Address::getPostalCode)));
			clazz->addMethod (new Method ("setPostalCode", createMethodWrapper (&Address::setPostalCode)));
			clazz->addMethod (new Method ("getCity", createMethodWrapper (&Address::getCity)));
			clazz->addMethod (new Method ("setCity", createMethodWrapper (&Address::setCity)));
			clazz->addMethod (new Method ("getCountry", createMethodWrapper (&Address::getCountry)));
			clazz->addMethod (new Method ("setCountry", createMethodWrapper (&Address::setCountry)));
			clazz->addMethod (new Method ("getString", createMethodWrapper (&Address::getString)));
			clazz->addMethod (new Method ("setString", createMethodWrapper (&Address::setString)));
			clazz->addMethod (new Method ("getProperty", createMethodWrapper (&Address::getProperty)));
			clazz->addMethod (new Method ("setProperty", createMethodWrapper (&Address::setProperty)));
		}
	}
	{
		Class *clazz = new Class ("AddressList", typeid (AddressList&), new PtrDeleter <AddressList >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <AddressList, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <AddressList > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <AddressList > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <AddressList > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <AddressList > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("City", typeid (City &), new Reflection::PtrDeleter <City>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <City, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <City, const std::string &>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("init", createMethodWrapper (&City::init)));
			clazz->addMethod (new Method ("initThrow", createMethodWrapper (&City::initThrow)));
			clazz->addMethod (new Method ("getName", createMethodWrapper (&City::getName)));
			clazz->addMethod (new Method ("setName", createMethodWrapper (&City::setName)));
		}
	}
	{
		Class *clazz = new Class ("CityVector", typeid (CityVector&), new PtrDeleter <CityVector >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <CityVector, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <CityVector > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <CityVector > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <CityVector > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <CityVector > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("CityList", typeid (CityList&), new PtrDeleter <CityList >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <CityList, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <CityList > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <CityList > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <CityList > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <CityList > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("CityMap", typeid (CityMap&), new PtrDeleter <CityMap >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <CityMap, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <CityMap > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <CityMap > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <CityMap > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <CityMap > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("Bar", typeid (Bar &), new Reflection::PtrDeleter <Bar>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Bar, const std::string &, const std::string &, int, double, char, _Bool, char *>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Bar, const std::string &, const std::string &, ::std::shared_ptr<City>>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Bar, const Core::Variant &>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("city4", Reflection::createFieldWrapper (&Bar::city4)));
			clazz->addField (new Field ("city5", Reflection::createFieldWrapper (&Bar::city5)));
			clazz->addMethod (new Method ("getField0", createMethodWrapper (&Bar::getField0)));
			clazz->addMethod (new Method ("setField0", createMethodWrapper (&Bar::setField0)));
			clazz->addMethod (new Method ("getField1", createMethodWrapper (&Bar::getField1)));
			clazz->addMethod (new Method ("setField1", createMethodWrapper (&Bar::setField1)));
			clazz->addMethod (new Method ("getField2", createMethodWrapper (&Bar::getField2)));
			clazz->addMethod (new Method ("setField2", createMethodWrapper (&Bar::setField2)));
			clazz->addMethod (new Method ("getField3", createMethodWrapper (&Bar::getField3)));
			clazz->addMethod (new Method ("setField3", createMethodWrapper (&Bar::setField3)));
			clazz->addMethod (new Method ("getField4", createMethodWrapper (&Bar::getField4)));
			clazz->addMethod (new Method ("setField4", createMethodWrapper (&Bar::setField4)));
			clazz->addMethod (new Method ("getField5", createMethodWrapper (&Bar::getField5)));
			clazz->addMethod (new Method ("setField5", createMethodWrapper (&Bar::setField5)));
			clazz->addMethod (new Method ("getField6", createMethodWrapper (&Bar::getField6)));
			clazz->addMethod (new Method ("getCity", createMethodWrapper (&Bar::getCity)));
			clazz->addMethod (new Method ("setCity", createMethodWrapper (&Bar::setCity)));
			clazz->addMethod (new Method ("getCity2", createMethodWrapper (&Bar::getCity2)));
			clazz->addMethod (new Method ("setCity2", createMethodWrapper (&Bar::setCity2)));
			clazz->addMethod (new Method ("getCity3", createMethodWrapper (&Bar::getCity3)));
			clazz->addMethod (new Method ("setCity3", createMethodWrapper (&Bar::setCity3)));
			clazz->addMethod (new Method ("getCity4", createMethodWrapper (&Bar::getCity4)));
			clazz->addMethod (new Method ("getCity5", createMethodWrapper (&Bar::getCity5)));
			clazz->addMethod (new Method ("setAaaby", createMethodWrapper (&Bar::setAaaby)));
			clazz->addMethod (new Method ("getButter", createMethodWrapper (&Bar::getButter)));
			clazz->addMethod (new Method ("setButter", createMethodWrapper (&Bar::setButter)));
			clazz->addMethod (new Method ("getButter2", createMethodWrapper (&Bar::getButter2)));
			clazz->addMethod (new Method ("setButter2", createMethodWrapper (&Bar::setButter2)));
			clazz->addMethod (new Method ("funcA", createMethodWrapper (&Bar::funcA)));
			clazz->addMethod (new Method ("funcB", createMethodWrapper (&Bar::funcB)));
			clazz->addMethod (new Method ("funcD", createMethodWrapper (&Bar::funcD)));
		}
	}
	{
		Class *clazz = new Class ("BarVector", typeid (BarVector&), new PtrDeleter <BarVector >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <BarVector, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <BarVector > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <BarVector > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <BarVector > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <BarVector > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("BarList", typeid (BarList&), new PtrDeleter <BarList >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <BarList, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <BarList > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <BarList > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <BarList > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <BarList > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("BarListPtr", typeid (BarListPtr&), new PtrDeleter <BarListPtr >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <BarListPtr, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <BarListPtr > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <BarListPtr > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <BarListPtr > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <BarListPtr > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("BarMap", typeid (BarMap&), new PtrDeleter <BarMap >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <BarMap, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <BarMap > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <BarMap > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <BarMap > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <BarMap > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("Note", typeid (Note &), new Reflection::PtrDeleter <Note>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Note, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("getTitle", createMethodWrapper (&Note::getTitle)));
			clazz->addMethod (new Method ("setTitle", createMethodWrapper (&Note::setTitle)));
			clazz->addMethod (new Method ("getBody", createMethodWrapper (&Note::getBody)));
			clazz->addMethod (new Method ("setBody", createMethodWrapper (&Note::setBody)));
		}
	}
	{
		Class *clazz = new Class ("Telephone", typeid (Telephone &), new Reflection::PtrDeleter <Telephone>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Telephone, const std::string &>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("getName", createMethodWrapper (&Telephone::getName)));
			clazz->addMethod (new Method ("setName", createMethodWrapper (&Telephone::setName)));
		}
	}
	{
		Class *clazz = new Class ("TelephoneList", typeid (TelephoneList&), new PtrDeleter <TelephoneList >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <TelephoneList, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <TelephoneList > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <TelephoneList > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <TelephoneList > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <TelephoneList > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("Contractor", typeid (Contractor &), new Reflection::PtrDeleter <Contractor>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Contractor, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("getName", createMethodWrapper (&Contractor::getName)));
			clazz->addMethod (new Method ("setName", createMethodWrapper (&Contractor::setName)));
			clazz->addMethod (new Method ("getSymbol", createMethodWrapper (&Contractor::getSymbol)));
			clazz->addMethod (new Method ("setSymbol", createMethodWrapper (&Contractor::setSymbol)));
			clazz->addMethod (new Method ("getAddressList", createMethodWrapper (&Contractor::getAddressList)));
			clazz->addMethod (new Method ("setAddressList", createMethodWrapper (&Contractor::setAddressList)));
			clazz->addMethod (new Method ("getTelephoneList", createMethodWrapper (&Contractor::getTelephoneList)));
			clazz->addMethod (new Method ("setTelephoneList", createMethodWrapper (&Contractor::setTelephoneList)));
			clazz->addMethod (new Method ("getZyd", createMethodWrapper (&Contractor::getZyd)));
			clazz->addMethod (new Method ("setZyd", createMethodWrapper (&Contractor::setZyd)));
			clazz->addMethod (new Method ("getMason", createMethodWrapper (&Contractor::getMason)));
			clazz->addMethod (new Method ("setMason", createMethodWrapper (&Contractor::setMason)));
			clazz->addMethod (new Method ("getPlec", createMethodWrapper (&Contractor::getPlec)));
			clazz->addMethod (new Method ("setPlec", createMethodWrapper (&Contractor::setPlec)));
			clazz->addMethod (new Method ("getWiek", createMethodWrapper (&Contractor::getWiek)));
			clazz->addMethod (new Method ("setWiek", createMethodWrapper (&Contractor::setWiek)));
		}
	}
	{
		Class *clazz = new Class ("Country", typeid (Country &), new Reflection::PtrDeleter <Country>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Country, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("getName", createMethodWrapper (&Country::getName)));
			clazz->addMethod (new Method ("setName", createMethodWrapper (&Country::setName)));
		}
	}
	{
		Class *clazz = new Class ("CountryVector", typeid (CountryVector&), new PtrDeleter <CountryVector >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <CountryVector, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <CountryVector > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <CountryVector > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <CountryVector > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <CountryVector > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("CountryList", typeid (CountryList&), new PtrDeleter <CountryList >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <CountryList, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <CountryList > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <CountryList > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <CountryList > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <CountryList > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("Foo", typeid (Foo &), new Reflection::PtrDeleter <Foo>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Foo, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("addr", Reflection::createFieldWrapper (&Foo::addr)));
			clazz->addField (new Field ("addr2", Reflection::createFieldWrapper (&Foo::addr2)));
			clazz->addField (new Field ("city2", Reflection::createFieldWrapper (&Foo::city2)));
			clazz->addField (new Field ("city3", Reflection::createFieldWrapper (&Foo::city3)));
			clazz->addMethod (new Method ("getField0", createMethodWrapper (&Foo::getField0)));
			clazz->addMethod (new Method ("setField0", createMethodWrapper (&Foo::setField0)));
			clazz->addMethod (new Method ("getField1", createMethodWrapper (&Foo::getField1)));
			clazz->addMethod (new Method ("setField1", createMethodWrapper (&Foo::setField1)));
			clazz->addMethod (new Method ("getField2", createMethodWrapper (&Foo::getField2)));
			clazz->addMethod (new Method ("setField2", createMethodWrapper (&Foo::setField2)));
			clazz->addMethod (new Method ("getField3", createMethodWrapper (&Foo::getField3)));
			clazz->addMethod (new Method ("setField3", createMethodWrapper (&Foo::setField3)));
			clazz->addMethod (new Method ("getField4", createMethodWrapper (&Foo::getField4)));
			clazz->addMethod (new Method ("setField4", createMethodWrapper (&Foo::setField4)));
			clazz->addMethod (new Method ("getField5", createMethodWrapper (&Foo::getField5)));
			clazz->addMethod (new Method ("setField5", createMethodWrapper (&Foo::setField5)));
			clazz->addMethod (new Method ("getField6", createMethodWrapper (&Foo::getField6)));
			clazz->addMethod (new Method ("setField6", createMethodWrapper (&Foo::setField6)));
			clazz->addMethod (new Method ("getCity", createMethodWrapper (&Foo::getCity)));
			clazz->addMethod (new Method ("setCity", createMethodWrapper (&Foo::setCity)));
			clazz->addMethod (new Method ("getCity3", createMethodWrapper (&Foo::getCity3)));
			clazz->addMethod (new Method ("getPlace", createMethodWrapper (&Foo::getPlace)));
			clazz->addMethod (new Method ("getPlace2", createMethodWrapper (&Foo::getPlace2)));
			clazz->addMethod (new Method ("getCity2", createMethodWrapper (&Foo::getCity2)));
		}
	}
	{
		Class *clazz = new Class ("HelperAT", typeid (HelperAT &), new Reflection::PtrDeleter <HelperAT>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <HelperAT, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("cnt", Reflection::createFieldWrapper (&HelperAT::cnt)));
			clazz->addMethod (new Method ("inc", createMethodWrapper (&HelperAT::inc)));
			clazz->addMethod (new Method ("dec", createMethodWrapper (&HelperAT::dec)));
			clazz->addMethod (new Method ("set", createMethodWrapper (&HelperAT::set)));
		}
	}
	{
		Class *clazz = new Class ("K202", typeid (k202::K202 &), new Reflection::PtrDeleter <k202::K202>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addMethod (new Method ("setBeanWrapper", createMethodWrapper (&k202::K202::setBeanWrapper)));
		}
	}
	{
		Class *clazz = new Class ("X", typeid (X &), new Reflection::PtrDeleter <X>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <X, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("d", Reflection::createFieldWrapper (&X::d)));
			clazz->addField (new Field ("ii", Reflection::createFieldWrapper (&X::ii)));
			clazz->addField (new Field ("s", Reflection::createFieldWrapper (&X::s)));
			clazz->addField (new Field ("x0", Reflection::createFieldWrapper (&X::x0)));
			clazz->addMethod (new Method ("getChar", createMethodWrapper (&X::getChar)));
			clazz->addMethod (new Method ("setChar", createMethodWrapper (&X::setChar)));
			clazz->addMethod (new Method ("getInt", createMethodWrapper (&X::getInt)));
			clazz->addMethod (new Method ("setInt", createMethodWrapper (&X::setInt)));
			clazz->addMethod (new Method ("getX0", createMethodWrapper (&X::getX0)));
		}
	}
	{
		Class *clazz = new Class ("IFactory", typeid (Factory::IFactory &), new Reflection::PtrDeleter <Factory::IFactory>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("create", createMethodWrapper (&Factory::IFactory::create)));
		}
	}
	{
		Class *clazz = new Class ("CityFactory", typeid (CityFactory &), new Reflection::PtrDeleter <CityFactory>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("IFactory");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <CityFactory, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("create", createMethodWrapper (&CityFactory::create)));
		}
	}
	{
		Class *clazz = new Class ("IEditor", typeid (Editor::IEditor &), new Reflection::PtrDeleter <Editor::IEditor>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("convert", createMethodWrapper (&Editor::IEditor::convert)));
		}
	}
	{
		Class *clazz = new Class ("DummyIEditor", typeid (DummyIEditor &), new Reflection::PtrDeleter <DummyIEditor>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("IEditor");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <DummyIEditor, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("convert", createMethodWrapper (&DummyIEditor::convert)));
		}
	}
	{
		Class *clazz = new Class ("A", typeid (T::A &), new Reflection::PtrDeleter <T::A>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <T::A, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("init", createMethodWrapper (&T::A::init)));
			clazz->addMethod (new Method ("getField", createMethodWrapper (&T::A::getField)));
			clazz->addMethod (new Method ("setField", createMethodWrapper (&T::A::setField)));
			clazz->addMethod (new Method ("get", createMethodWrapper (&T::A::get)));
			clazz->addMethod (new Method ("set", createMethodWrapper (&T::A::set)));
		}
	}
	{
		Class *clazz = new Class ("Testowa", typeid (A::Testowa &), new Reflection::PtrDeleter <A::Testowa>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <A::Testowa, void>::Level1Wrapper::newConstructorPointer ()));
		}
	}
	{
		Class *clazz = new Class ("B::Testowa", typeid (B::Testowa &), new Reflection::PtrDeleter <B::Testowa>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <B::Testowa, void>::Level1Wrapper::newConstructorPointer ()));
		}
	}
	{
		Class *clazz = new Class ("C::Testowa", typeid (C::Testowa &), new Reflection::PtrDeleter <C::Testowa>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <C::Testowa, void>::Level1Wrapper::newConstructorPointer ()));
		}
	}
	{
		Class *clazz = new Class ("D::Testowa", typeid (D::Testowa &), new Reflection::PtrDeleter <D::Testowa>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <D::Testowa, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("f", createMethodWrapper (&D::Testowa::f)));
		}
	}
	{
		Class *clazz = new Class ("Testowa01", typeid (E::Testowa01 &), new Reflection::PtrDeleter <E::Testowa01>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <E::Testowa01, void>::Level1Wrapper::newConstructorPointer ()));
		}
	}
	{
		Class *clazz = new Class ("Testowa02", typeid (E::Testowa02 &), new Reflection::PtrDeleter <E::Testowa02>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Object");
			clazz->addMethod (new Method ("f", createMethodWrapper (&E::Testowa02::f)));
		}
	}
	{
		Class *clazz = new Class ("Testowa03", typeid (E::Testowa03 &), new Reflection::PtrDeleter <E::Testowa03>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Testowa02");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <E::Testowa03, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("f", createMethodWrapper (&E::Testowa03::f)));
			clazz->addMethod (new Method ("g", createMethodWrapper (&E::Testowa03::g)));
		}
	}
	{
		Class *clazz = new Class ("Testowa04", typeid (E::Testowa04 &), new Reflection::PtrDeleter <E::Testowa04>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("Testowa03");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <E::Testowa04, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("h", createMethodWrapper (&E::Testowa04::h)));
		}
	}
	{
		Class *clazz = new Class ("Y", typeid (Y &), new Reflection::PtrDeleter <Y>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("IY");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Y, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("d", Reflection::createFieldWrapper (&Y::d)));
			clazz->addField (new Field ("s", Reflection::createFieldWrapper (&Y::s)));
			clazz->addField (new Field ("i", Reflection::createFieldWrapper (&Y::i)));
			clazz->addField (new Field ("y", Reflection::createFieldWrapper (&Y::y)));
			clazz->addMethod (new Method ("getY", createMethodWrapper (&Y::getY)));
		}
	}
	{
		Class *clazz = new Class ("Handler", typeid (Handler &), new Reflection::PtrDeleter <Handler>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Handler, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("onClickedListener", Reflection::createFieldWrapper (&Handler::onClickedListener)));
			clazz->addField (new Field ("onClickedListener2", Reflection::createFieldWrapper (&Handler::onClickedListener2)));
			clazz->addField (new Field ("iValue", Reflection::createFieldWrapper (&Handler::iValue)));
			clazz->addMethod (new Method ("onClicked", createMethodWrapper (&Handler::onClicked)));
			clazz->addMethod (new Method ("onClicked3", createMethodWrapper (&Handler::onClicked3)));
		}
	}
	{
		Class *clazz = new Class ("TestFactory", typeid (TestFactory &), new Reflection::PtrDeleter <TestFactory>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addBaseClassName ("IFactory");
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <TestFactory, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addMethod (new Method ("create", createMethodWrapper (&TestFactory::create)));
		}
	}
	{
		Class *clazz = new Class ("A01", typeid (A01 &), new Reflection::PtrDeleter <A01>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <A01, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("a02", Reflection::createFieldWrapper (&A01::a02)));
			clazz->addMethod (new Method ("setA02", createMethodWrapper (&A01::setA02)));
		}
	}
	{
		Class *clazz = new Class ("A02", typeid (A02 &), new Reflection::PtrDeleter <A02>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <A02, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("a01", Reflection::createFieldWrapper (&A02::a01)));
			clazz->addMethod (new Method ("setA01", createMethodWrapper (&A02::setA01)));
		}
	}
	{
		Class *clazz = new Class ("A03", typeid (A03 &), new Reflection::PtrDeleter <A03>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <A03, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("cont", Reflection::createFieldWrapper (&A03::cont)));
			clazz->addMethod (new Method ("setCont", createMethodWrapper (&A03::setCont)));
		}
	}
	{
		Class *clazz = new Class ("A04", typeid (A04 &), new Reflection::PtrDeleter <A04>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <A04, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("cont", Reflection::createFieldWrapper (&A04::cont)));
			clazz->addMethod (new Method ("setCont", createMethodWrapper (&A04::setCont)));
		}
	}
	{
		Class *clazz = new Class ("Source", typeid (Source &), new Reflection::PtrDeleter <Source>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Source, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("cont", Reflection::createFieldWrapper (&Source::cont)));
			clazz->addMethod (new Method ("setCont", createMethodWrapper (&Source::setCont)));
			clazz->addMethod (new Method ("init", createMethodWrapper (&Source::init)));
		}
	}
	{
		Class *clazz = new Class ("DummyVector", typeid (DummyVector&), new PtrDeleter <DummyVector >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <DummyVector, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <DummyVector > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <DummyVector > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <DummyVector > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <DummyVector > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
	{
		Class *clazz = new Class ("Dummy1", typeid (Dummy1 &), new Reflection::PtrDeleter <Dummy1>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Dummy1, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("vector", Reflection::createFieldWrapper (&Dummy1::vector)));
		}
	}
	{
		Class *clazz = new Class ("A01c", typeid (A01c &), new Reflection::PtrDeleter <A01c>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <A01c, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("a02", Reflection::createFieldWrapper (&A01c::a02)));
			clazz->addMethod (new Method ("setA02", createMethodWrapper (&A01c::setA02)));
		}
	}
	{
		Class *clazz = new Class ("A02c", typeid (A02c &), new Reflection::PtrDeleter <A02c>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <A02c, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("a01", Reflection::createFieldWrapper (&A02c::a01)));
			clazz->addMethod (new Method ("setA01", createMethodWrapper (&A02c::setA01)));
		}
	}
	{
		Class *clazz = new Class ("Dummy", typeid (Dummy &), new Reflection::PtrDeleter <Dummy>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Dummy, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Dummy, struct Dummy *>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("field1", Reflection::createFieldWrapper (&Dummy::field1)));
			clazz->addField (new Field ("field2", Reflection::createFieldWrapper (&Dummy::field2)));
			clazz->addField (new Field ("field3", Reflection::createFieldWrapper (&Dummy::field3)));
		}
	}
	{
		Class *clazz = new Class ("Dummy3", typeid (Dummy3 &), new Reflection::PtrDeleter <Dummy3>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Dummy3, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("field1", Reflection::createFieldWrapperEnum (&Dummy3::field1)));
			clazz->addField (new Field ("field2", Reflection::createFieldWrapperEnum (&Dummy3::field2)));
			clazz->addField (new Field ("field3", Reflection::createFieldWrapperEnum (&Dummy3::field3)));
		}
	}
	{
		Class *clazz = new Class ("Receiver", typeid (Receiver &), new Reflection::PtrDeleter <Receiver>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Receiver, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("onClicked", Reflection::createFieldWrapper (&Receiver::onClicked)));
			clazz->addField (new Field ("onSig0", Reflection::createFieldWrapper (&Receiver::onSig0)));
			clazz->addField (new Field ("onSig1", Reflection::createFieldWrapper (&Receiver::onSig1)));
			clazz->addField (new Field ("onSig2", Reflection::createFieldWrapper (&Receiver::onSig2)));
			clazz->addField (new Field ("iValue", Reflection::createFieldWrapper (&Receiver::iValue)));
			clazz->addField (new Field ("sValue", Reflection::createFieldWrapper (&Receiver::sValue)));
			clazz->addMethod (new Method ("onClicked1", createMethodWrapper (&Receiver::onClicked1)));
			clazz->addMethod (new Method ("handler2", createMethodWrapper (&Receiver::handler2)));
			clazz->addMethod (new Method ("handler3", createMethodWrapper (&Receiver::handler3)));
		}
	}
	{
		Class *clazz = new Class ("Receiver2", typeid (Receiver2 &), new Reflection::PtrDeleter <Receiver2>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Receiver2, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("onSig3", Reflection::createFieldWrapper (&Receiver2::onSig3)));
			clazz->addField (new Field ("onSig4", Reflection::createFieldWrapper (&Receiver2::onSig4)));
			clazz->addField (new Field ("iValue", Reflection::createFieldWrapper (&Receiver2::iValue)));
			clazz->addMethod (new Method ("handler2", createMethodWrapper (&Receiver2::handler2)));
		}
	}
	{
		Class *clazz = new Class ("Receiver3", typeid (Receiver3 &), new Reflection::PtrDeleter <Receiver3>);
		if (!Manager::add (clazz)) {
			delete clazz;
		}
		else {
			clazz->addConstructor (new Constructor (Reflection::ConstructorPointerWrapper2 <Receiver3, void>::Level1Wrapper::newConstructorPointer ()));
			clazz->addField (new Field ("clck1", Reflection::createFieldWrapper (&Receiver3::clck1)));
			clazz->addField (new Field ("clck2", Reflection::createFieldWrapper (&Receiver3::clck2)));
		}
	}
	{
		Class *clazz = new Class ("IntVector", typeid (IntVector&), new PtrDeleter <IntVector >);
		if (!Manager::add (clazz)) {;
			delete clazz;
		}
		else { 
			IConstructorPointer *cp = Reflection::ConstructorPointerWrapper2 <IntVector, void>::Level1Wrapper::newConstructorPointer ();
			clazz->addConstructor (new Constructor (cp));

			ICallableWrapper *w = new AddWrapper <IntVector > ();
			clazz->addMethod (new Method ("add", w));

			w = new GetWrapper <IntVector > ();
			clazz->addMethod (new Method ("get", w));

			w = new SetWrapper <IntVector > ();
			clazz->addMethod (new Method ("set", w));

			w = new IteratorWrapper <IntVector > ();
			clazz->addMethod (new Method ("iterator", w));
		}
	}
}

struct Sentinel_testHelpers {
        Sentinel_testHelpers ()
        {
                createReflectionDatabase_testHelpers ();
        }
};

static Sentinel_testHelpers sentinel_testHelpers;
} // namespace

